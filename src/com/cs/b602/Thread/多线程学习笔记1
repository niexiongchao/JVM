第一章
多线程的实现：
1.继承Thread类，重写run方法。
2.实现Runnable 接口，重写run方法，当创建的类已有父类，可以进行接口的实现

线程的特点：
1.随机性

线程的数据共享与不共享：
共享：使用同一个线程对象初始化线程
不共享：使用新线程对象，初始化线程


非线程安全：多个线程可以同时访问同一个资源
线程安全：同一时间只有一个线程独占资源，synchronize，validate修饰

i--与System.out.println()异常
demo3

isAlive()方法：判断当前线程是否处于活动状态(启动未结束)


this与curentThread()区别：https://blog.csdn.net/yezis/article/details/57513130
当将线程作为构造参数来新建线程对象时，两者引用不同

sleep()方法：休眠线程
对于sleep()方法，我们首先要知道该方法是属于Thread类中的。而wait()方法，则是属于Object类中的。

sleep()方法导致了程序暂停执行指定的时间，让出cpu该其他线程，但是他的监控状态依然保持者，当指定的时间到了又会自动恢复运行状态。
在调用sleep()方法的过程中，线程不会释放对象锁。
而当调用wait()方法的时候，线程会放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象调用notify()方法后本线程才进入对象锁定池准备
获取对象锁进入运行状态。


停止线程
1.设置停止标志,return 结束
2.thread.stop强行停止，不安全，不推荐使用
3.interrupt中断


interrupt不能真正停止线程,只是将线程的中断标志置为true,不做其他操作

this.interrupted()判断当前线程是否中断，并清除标志状态置为false
this.isinterrupted判读Thread线程是否中断，不清除状态

停止线程的方法：
Demo4
异常法：使用interrupt()将标志置为true,使用thread.interrupted()方法判断为true,抛出异常，捕获异常，达到中断线程的目的

在sleep()状态下停止线程：
Demo5
结果：抛出interruptException,结束线程，将状态标志清除置为false

stop暴力停止线程，会造成数据不一致，不推荐使用
demo6

使用return停止线程：不建议使用
demo7

线程的暂停：suspend(),恢复resume(),缺点独占资源，并产生死锁
demo8、demo9


yied(),放弃cpu执行时间，demo10

线程优先级：
设置 优先级的方法：setPriority()
1-10，一般线程默认为5
优先级具有继承性，例如：A线程启动B线程，则B与A的优先级相同
优先级具有规则性，优先级高的有更多的运行机会，优先级也具有随机性，两个优先级差距较小时，也可能出现优先级低的先执行完

守护线程：
java线程分为两种：守护线程和用户线程
守护线程：非守护线程的“保姆”，当不存在非守护线程时，守护线程会自动销毁
典型的守护线程：jvm垃圾回收线程，当jvm中不存在非守护线程时，垃圾回收线程会自动销毁
demo11
https://blog.csdn.net/shimiso/article/details/8964414







